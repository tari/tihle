image: tari/tihle-build:latest


.cargo:
  variables:
    CARGO_HOME: $CI_PROJECT_DIR/.cargo_home
  cache:
    paths:
    - .cargo_home/bin
    - .cargo_home/registry/index
    - .cargo_home/registry/cache
    - .cargo_home/git/db
    - target/


test:
  stage: test
  needs: []
  script:
  - cargo test --locked


build:windows:
  stage: build
  needs: []
  extends: .cargo
  cache:
    key: windows-release
  variables:
    # Cross-compiling for mingw and exception handling is rather fraught:
    # https://github.com/rust-lang/rust/issues/32859
    CARGO_TARGET_I686_PC_WINDOWS_GNU_LINKER: "i686-w64-mingw32-gcc"
    CARGO_TARGET_I686_PC_WINDOWS_GNU_RUSTFLAGS: "-Cpanic=abort -Clink-args=icon.res.o"
  script:
    # Link in resources so we have a nice icon
    - i686-w64-mingw32-windres dist/icon.rc icon.res.o
    # Ask sdl2 to statically link against an SDL library it provides for us
    - cargo build --bins --release --locked --target=i686-pc-windows-gnu --features=sdl2/static-link,sdl2/bundled
  artifacts:
    paths:
    - target/i686-pc-windows-gnu/release/


build:emscripten:
  stage: build
  needs: []
  extends: .cargo
  cache:
    key: emscripten-release
  script:
    - cargo build --bins --release --locked --target=wasm32-unknown-emscripten
  artifacts:
    paths:
      - target/wasm32-unknown-emscripten/release/


package:emscripten:
  stage: deploy
  needs: ["build:emscripten"]
  script:
    - make -C programs
    - python3 /emsdk/upstream/emscripten/tools/file_packager.py programs.data --js-output=programs.js --preload programs/phoenix.8xp
    - mkdir release
    - cp dist/emscripten-shell.html release/index.html
    - cp programs.{js,data} release
    - cp target/wasm32-unknown-emscripten/release/tihle.{js,wasm} release
  artifacts:
    paths:
      - release/


pages:
  stage: deploy
  needs: ["package:emscripten"]
  only: [master]
  script:
    - mv release public
  artifacts:
    paths:
      - public/


build:linux:
  stage: build
  needs: []
  extends: .cargo
  cache:
    key: linux-release
  script:
    - cargo build --bins --release --locked --target=x86_64-unknown-linux-gnu --features=sdl2/static-link,sdl2/bundled
  artifacts:
    paths:
      - target/x86_64-unknown-linux-gnu/release/


package:linux:
  stage: deploy
  needs: ["build:linux"]
  script:
    - ./dist/build-appimage.sh
  artifacts:
    paths:
      - tihle-*-x86_64.AppImage
